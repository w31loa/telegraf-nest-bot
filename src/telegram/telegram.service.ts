import { ConfigService } from '@nestjs/config';
import { Ctx, Start, Update ,On ,Message, Action, Hears, Command} from "nestjs-telegraf";
import { ApiService } from 'src/api/api.service';
import {Markup, Scenes, Telegraf} from 'telegraf'
import { getKeyboardWithMarks, getKeyboardWithSubjects } from './talagram.keyboard';
import { MarkService } from 'src/mark/mark.service';
import { IMark } from 'src/types/types';
import { SubjectService } from 'src/subject/subject.service';
import { SceneContext, Stage } from 'telegraf/typings/scenes';
import { LoginScene } from './scenes/login.scene';
import { User } from '@prisma/client';

type Context = Scenes.SceneContext


@Update()
export class TelegramService extends Telegraf<Context> {

  data = [
    {
      "id": 3,
      "title": "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫",
      "userId": 1
    },
    {
      "id": 4,
      "title": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
      "userId": 1
    }
  ]

    constructor(private readonly configService:ConfigService, 
                private readonly marksService:ApiService ,
                private readonly mark:MarkService,
                private readonly subject: SubjectService,
                private readonly loginScene: LoginScene ){
        super(configService.get('TELEGRAM_KEY'))  
        
    }

    // stage = new Stage(this.loginScene)

    @Start()
    onStart(@Ctx() ctx:Context){ 
          
        ctx.replyWithHTML('–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–µ–π —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ –ø—Ä—è–º–æ –≤ –¢–µ–ª–µ–≥—Ä–∞–º!\n <i>–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –ª–æ–≥–∏–Ωüòâ</i>', Markup.keyboard([
            ['üîê –õ–æ–≥–∏–Ω'],
        ]).resize() ) 
         ctx.state
    }
    // @On('sticker')
    // onStiker(@Message('stiker') message,@Ctx() ctx:Context){
    //   ctx.replyWithHTML(`              –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç             `, Markup.inlineKeyboard([
    //       Markup.button.callback("–†—É—Å—Å–∫–∏–π", 'lesson1'), 
    //       Markup.button.callback('–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', 'lesson2'),
    //       Markup.button.callback('–ú–î–ö', 'lesson3'),
    //       Markup.button.callback('–ê–Ω–≥–ª–∏—Å–∫–∏–π', 'lesson4'), 
    //     ])
    //   )
    // }  
    @On('sticker') 
    async onStiker(@Message('stiker') message,@Ctx() ctx:Context){
         //@ts-ignore
        const user = ctx.session.user as User
        if(user){
          const subjects = await this.subject.getAllSubjectsByUserId(+user.id)


          ctx.reply('–∫—Ä—Å–∞–≤–∞', {
            reply_markup:{
              inline_keyboard: 
                getKeyboardWithSubjects(subjects)
              ,
            }
          })
        }
        else{
          ctx.reply('–ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –¥—Ä—É–≥‚ù§')
        }
      
    }

    // @Hears('/key')
    // async onHears(@Ctx() ctx: Context) {
   
    // }

    @Hears('üîê –õ–æ–≥–∏–Ω')
    async callLoginScene(@Ctx() ctx:SceneContext){
        ctx.scene.enter('login')
        return

    }
    @Hears('–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
    async marksUpdate(@Ctx() ctx:SceneContext){
        // ctx.scene.enter('login')
        return

    }
    @Hears('üìã –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤')
    async getSubjects(@Ctx() ctx:SceneContext){
          //@ts-ignore
          const user = ctx.session.user as User
          if(user){
            const subjects = await this.subject.getAllSubjectsByUserId(+user.id)
  
  
            ctx.replyWithHTML('üìö <u>–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤</u> üìö', {
              reply_markup:{
                inline_keyboard: 
                  getKeyboardWithSubjects(subjects)
                ,
              }
            })
          }
          else{
            ctx.reply('–ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –¥—Ä—É–≥‚ù§')
          }

    }

    @On('callback_query')
    async sda( @Ctx() ctx:Context){
      //@ts-ignore
      const callback = {
          //@ts-ignore
          type: ctx.callbackQuery.data.split('_')[0],
          //@ts-ignore
          id: ctx.callbackQuery.data.split('_')[1]
      }
      //@ts-ignore

      console.log(ctx.callbackQuery.data)

      if(callback.type == 'subjectId'){
        const subjectId = +callback.id

        const marks:IMark[] = await this.mark.getAllMarksBySubjectId(subjectId) 
    
  
        const subject = await this.subject.getSubjectById(subjectId)
  
  
        // ctx.replyWithHTML(`${marks.map(el=> ` ü§ì${el.mark}  üìÖ ${el.date}\t \n`)}` , {parse_mode:'MarkdownV2'})
  
        // let table = '```ü§ì–û—Ü–µ–Ω–∫–∏\n| ‚úÖ–û—Ü–µ–Ω–∫–∞ | üìÖ–î–∞—Ç–∞ |\n'
  
        // marks.forEach(el=>{
        //   table+= `|     ${el.mark}     |   ${el.date.length<5?el.date+' ': el.date}  |\n`
        // })
        // table+='```'
        // let table = '```ü§ì–û—Ü–µ–Ω–∫–∏\n‚úÖ–û—Ü–µ–Ω–∫–∞       üìÖ–î–∞—Ç–∞\n'
  
        // marks.forEach(el=>{
        //   table+= `     ${el.mark}           ${el.date}      \n`
        // })
        // table+='```'
     
  
  
        // ctx.replyWithHTML('```ü§ì–û—Ü–µ–Ω–∫–∏\n‚úÖ–û—Ü–µ–Ω–∫–∞       üìÖ–î–∞—Ç–∞\n     5           11.12      \n     5           11.12      \n     5           11.12      \n```' , {parse_mode:'MarkdownV2'})
        // ctx.replyWithHTML(table , {parse_mode:'MarkdownV2'})
        ctx.reply(subject.title, {
          reply_markup:{
        //@ts-ignore
            inline_keyboard: 
              getKeyboardWithMarks(marks)
            ,
          }
        })
        // ctx.replyWithHTML(table , {parse_mode:'HTML'})
   
        // console.log(ctx.callbackQuery.data)
      }
 
    }


    @Action('callback_query')
    async onAction(@Ctx() ctx:Context ){
      // this.marksService.generateResponse({'username': "BARANNIKAP" , 'userpass': `1dbf71922928df9ce9e0e8303bb2c84f02184f8e`}).then(data=>{
      //   // console.log(data['–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫'])

      //   const replyStr:string = `${data['–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫'][13].date}: ${data['–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫'][13].mark}`
      //   ctx.replyWithHTML(replyStr)
        console.log(123)
      // })

    }

    // @On('text')
    // async onMessage(@Message('text') message : string, @Ctx() ctx:Context){
    //     // const marks = await 
    //   this.marksService.generateResponse({'username': "BARANNIKAP" , 'userpass': `1dbf71922928df9ce9e0e8303bb2c84f02184f8e`}).then(data=>{
    //     console.log(data['–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫'])

    //     const replyStr:string = `${data['–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫'][13].date}: ${data['–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫'][13].mark}`
    //     ctx.replyWithHTML(replyStr)
        
    //   })
        // this.marksService.test().then(data=>{
        //     console.log(data)
        // })
    // }
}
