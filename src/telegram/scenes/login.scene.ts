import { Injectable } from "@nestjs/common";
import { Ctx, Hears, On, Scene, SceneEnter } from "nestjs-telegraf";
import { ApiService } from "src/api/api.service";
import { MarkService } from "src/mark/mark.service";
import { SubjectService } from "src/subject/subject.service";
import { UserService } from "src/user/user.service";
import { Markup } from "telegraf";
import { SceneContext  } from "telegraf/typings/scenes";
import { TelegramService } from "../telegram.service";


@Injectable()
@Scene('login')
export class LoginScene{
    constructor(private readonly user: UserService ,
                private readonly api: ApiService,
                private readonly subject: SubjectService,
                private readonly mark: MarkService
                ){}

    @SceneEnter()
    async loginEnter(@Ctx() ctx:SceneContext){
        await ctx.replyWithHTML('<u>–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å</u> ‚úè (–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å")', Markup.keyboard([
            ['üö™ –í—ã–π—Ç–∏'],
        ]).resize())
    }
    @Hears('üö™ –í—ã–π—Ç–∏')
    async exit(@Ctx() ctx:SceneContext){
      
        await ctx.scene.leave()
         ctx.replyWithHTML('–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–≤–æ–µ–π —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ –ø—Ä—è–º–æ –≤ –¢–µ–ª–µ–≥—Ä–∞–º!\n <i>–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –ª–æ–≥–∏–Ωüòâ</i>', Markup.keyboard([
            ['üîê –õ–æ–≥–∏–Ω'],
        ]).resize() ) 

    }

    @On('text')
    async login(@Ctx() ctx:SceneContext){
        //@ts-ignore
       if(ctx.message.text.split(' ').length<2){
            ctx.scene.reenter()
            return
       }

        const  userData = {
            //@ts-ignore
            login: String(ctx.message.text).split(' ')[0],
            //@ts-ignore
            password: String(ctx.message.text).split(' ')[1],
        }

    

        //@ts-ignore
        const user = await this.user.login({username: userData.login , password: userData.password})

        if(!user){
            const message = await ctx.reply('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ....')
            //@ts-ignore
            // console.log(ctx.message)
            const data = await this.api.generateResponse({username: userData.login , userpass: userData.password})
            console.log(data)
            if(data[0] !=undefined){
                const newUser = await this.user.createUser({username: userData.login , password: userData.password})
                const subjects =  await this.subject.createAllSubjectsForUser({marks:data , userId: newUser.id})
                const userMarks = await this.mark.create({marks:data , userId: newUser.id})
                ctx.telegram.editMessageText(message.chat.id, message.message_id , undefined, '–ì–æ—Ç–æ–≤–æ‚úÖ \n '  ).then(()=>{
                    ctx.replyWithHTML('–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å —Å–≤–æ–∏ —É—Å–ø–µ—Ö–∏ –≤ —É—á–µ–±–µüòâ', Markup.keyboard([
                        ['üìã –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤'],
                        ['‚ôª –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'],
                        ['üö™ –í—ã–π—Ç–∏'],
                    ]).resize())
                })
                
                //@ts-ignore
                ctx.session.user = {
                    id: newUser.id,
                    username: newUser.username,
                    password: newUser.password
                }
                ctx.scene.leave()
            }
            else{
                ctx.telegram.editMessageText(message.chat.id, message.message_id , undefined, '‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å‚ùå \n –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ ü§®'  )

            }
           

        }else{
            //@ts-ignore 
            ctx.session.user = {
                id: user.id,
                username: user.username,
                password: user.password
            }
            ctx.reply('–ì–æ—Ç–æ–≤–æ‚úÖ').then(()=>{
                ctx.replyWithHTML('–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å —Å–≤–æ–∏ —É—Å–ø–µ—Ö–∏ –≤ —É—á–µ–±–µüòâ', Markup.keyboard([
                    ['üìã –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤'],
                    ['‚ôª –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'],
                    ['üö™ –í—ã–π—Ç–∏'],
                ]).resize())
                 
            })
            ctx.scene.leave()

        }


    

        
        
        //@ts-ignore
    
        //@ts-ignore
        console.log({data: ctx.session.user})   

    } 



  
}